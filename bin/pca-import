#!/usr/bin/env python3
"""Import files used for Phishing Campaign Assessments (PCA).

Usage:
  pca-import [--section SECTION] [--force] --customer [FILE]
  pca-import [--section SECTION] [--force] --assessment [FILE]
  pca-import [--section SECTION] [--force] --xml ASSESSMENT_ID CS_XML_DIRECTORY CAMPAIGN_END_DATE TEMPLATE_ID
  pca-import [--section SECTION] [--force] (--user-labels | --methodology) ASSESSMENT_ID FILE
  pca-import [--section SECTION] [--force] --image IMAGE_FILE (landing-page [IMAGE_URL] | sent-email | link-warning) <CAMPAIGN_ID>...
  pca-import [--section SECTION] [--force] --template FILE [TEMPLATE_ID]
  pca-import --sample-customer | --sample-assessment | --sample-template
  pca-import (-h | --help)
  pca-import --version

Options:
  -s SECTION --section=SECTION   Configuration section to use.
  -f --force                     Force import of existing request, destroying original

  -c --customer                  Import a customer JSON file.
  -a --assessment                Import an assessment JSON file.
  -x --xml                       Import a set of Cobalt Strike XML files.
  -l --user-labels               Import a CSV file containing user labels.
  -m --methodology               Import a text file containing specific methodology details.
  -i --image                     Import an image file and associate it with one or more campaigns.
  -t --template                  Import a phishing email template YAML file.
  --sample-customer              Output a sample customer template JSON file.
  --sample-assessment            Output a sample assessment template JSON file.
  --sample-template              Output a sample phishing email template YAML file.
  -h --help                      Show this screen.
  --version                      Show version.

NOTES:
  * If no FILE is specified, the document will be read from standard in.
  * CAMPAIGN_END_DATE format: "YYYY-MM-DD HH:MM" (e.g. "2017-03-29 09:00" = Mar. 29, 2017 0900 UTC)
"""

# Third-Party Libraries

# Standard Python Libraries
from collections import defaultdict
import csv
import hashlib
import json
import os
import sys

# Third-Party Libraries
from bson import ObjectId
from bson.errors import InvalidId
from dateutil import parser, tz
from defusedxml import sax
from docopt import docopt
from pymodm.errors import DoesNotExist, ValidationError
import yaml

# cisagov Libraries
from pca.core.common import Indicator
from pca.db.database import connect_from_config
from pca.db.database_model import (
    ApplicationDoc,
    AssessmentDoc,
    CampaignDoc,
    ClickDoc,
    CustomerDoc,
    EmailDoc,
    ImageDoc,
    TemplateDoc,
    UserDoc,
)
from pca.handlers.cobaltstrike_handler import (
    CobaltStrikeApplicationsContentHandler,
    CobaltStrikeCampaignsContentHandler,
    CobaltStrikeSentEmailsContentHandler,
    CobaltStrikeTokensContentHandler,
    CobaltStrikeWebHitsContentHandler,
)
from pca.util import util

args = docopt(__doc__, version="v0.0.1")
connect_from_config(
    args["--section"]
)  # Must connect to the DB before we can import our MongoModels

CS_XML_CAMPAIGNS_FILE = "campaigns.xml"
CS_XML_TOKENS_FILE = "tokens.xml"
CS_XML_SENT_EMAILS_FILE = "sentemails.xml"
CS_XML_WEB_HITS_FILE = "webhits.xml"
CS_XML_APPLICATIONS_FILE = "applications.xml"


def output_customer_template():
    """Output a JSON representation of a Customer schema."""
    customer = dict()
    customer["_id"] = "TEST"
    customer["name"] = "Test Customer"
    customer["acronym"] = "TEST"
    customer["contacts"] = [
        {
            "name": "Test Technical POC",
            "email": "test@test.org",
            "phone": "555-123-4567",
            "type": "TECHNICAL",
        },
        {
            "name": "Test Distro POC",
            "email": "distro@test.org",
            "phone": "",
            "type": "DISTRO",
        },
    ]
    print(util.to_json(customer))
    sys.exit(0)


def output_assessment_template():
    """Output a JSON representation of an Assessment schema."""
    assessment = dict()
    assessment["_id"] = "TEST_0001"
    assessment["customer"] = "TEST"
    assessment["team_lead"] = "Test Testerton"
    assessment["start_time"] = "2017-01-01"
    assessment["end_time"] = "2017-01-21"
    print(util.to_json(assessment))
    sys.exit(0)


def output_phishing_email_template():
    """Output a Phishing Email template."""
    # Would be nice to use yaml.dump, but I wanted to include the comments in the YAML output
    print("name: Name of This Template")
    print(
        "text: |\n  Text or HTML text of this\n  phishing message goes here.\n  Line breaks are preserved."
    )
    for indicator_category in Indicator.Indicator.INDICATOR_LOOKUP.keys():
        print("{}:".format(indicator_category))
        for indicator_name in Indicator.INDICATOR_LOOKUP[indicator_category].keys():
            print("  {:<20} # ".format(indicator_name + ": 0"), end="")
            print(
                ",  ".join(
                    "{}={}".format(score, explanation)
                    for (score, explanation) in Indicator.INDICATOR_LOOKUP[
                        indicator_category
                    ][indicator_name].items()
                )
            )
    print(
        "# Overall complexity level equals sum of appearance, sender, relevancy indicators (not behavior); should always be between 1 and 6"
    )
    sys.exit(0)


def customer_already_exists(customer_id):
    """Return True if Customer ID already exists."""
    try:
        CustomerDoc.objects.raw({"_id": customer_id}).first()
        return True
    except DoesNotExist:
        return False


def import_customer(request, source, force=False):
    """Save a Customer Doc to Mongo if Customer does not already exist."""
    if not force and customer_already_exists(request["_id"]):
        print("Cannot import, customer already exists: {}".format(request["_id"]))
        print("Use --force to destroy the currently stored document")
        print("and replace it with the imported version.")
        return False
    CustomerDoc.from_document(request).save()
    return True


def assessment_already_exists(assessment_id):
    """Return True if an Assessment ID already exist."""
    try:
        AssessmentDoc.objects.raw({"_id": assessment_id}).first()
        return True
    except DoesNotExist:
        return False


def import_assessment(request, source, force=False):
    """Import assessment data and save it to MongoDB."""
    if not force and assessment_already_exists(request["_id"]):
        print("Cannot import, assessment already exists: {}".format(request["_id"]))
        print("Use --force to destroy the currently stored document")
        print("and replace it with the imported version.")
        return False
    if not customer_already_exists(request["customer"]):
        print(
            "Cannot import, customer_id does not exist: {}".format(request["customer"])
        )
        return False
    doc = AssessmentDoc.from_document(request)
    doc.start_time = doc.start_time.replace(tzinfo=tz.tzutc())
    doc.end_time = doc.end_time.replace(tzinfo=tz.tzutc())
    doc.save()
    return True


def import_json_file(filename, force, customer_import, assessment_import):
    """Load a JSON file. Redirects import to appropriate handler."""
    f = open(filename, "rb")
    request = json.load(f)
    f.close()
    if customer_import:
        return import_customer(request, filename, force)
    elif assessment_import:
        return import_assessment(request, filename, force)


def import_json_stdin(force, customer_import, assessment_import):
    """Load a JSON fromd stdin. Redirects import to appropriate handler."""
    request = json.load(sys.stdin)
    if customer_import:
        return import_customer(request, "from stdin", force)
    elif assessment_import:
        return import_assessment(request, "from stdin", force)


def add_labels_to_user(label_list, user_id, force, assessment_doc):
    """Update a user's label with provided parameter."""
    try:
        user_doc = UserDoc.objects.raw({"_id": user_id}).first()
    except DoesNotExist:
        print(
            "Cannot add labels to user {} because the user does not exist in the database".format(
                user_id
            )
        )
        print("  Skipping this user")
        return False

    if user_doc.customer != assessment_doc.customer:
        print("Customer mismatch between user and asssessment")
        print(
            "  User {} is associated with customer {}".format(
                user_id, user_doc.customer._id
            )
        )
        print(
            "  Assessment {} is associated with customer {}".format(
                assessment_doc._id, assessment_doc.customer._id
            )
        )
        print("  Skipping this user")
        return False

    if not force and user_doc.customer_defined_labels.get(assessment_doc._id):
        print(
            "Cannot add labels to user {} because labels ({}) already exist for assessment {}".format(
                user_id,
                user_doc.customer_defined_labels[assessment_doc._id],
                assessment_doc._id,
            )
        )
        print("  Use --force to overwrite the labels")
        return False
    else:
        user_doc.customer_defined_labels[assessment_doc._id] = label_list
        user_doc.save()
        return True


def import_user_labels_file(filename, force, assessment_doc):
    """Import a user label file and adds it to a user."""
    user_labels_file = open(filename, "r")
    users_updated = 0
    for line in csv.reader(user_labels_file):
        email_hash = hashlib.sha256(line[0].encode("utf-8")).hexdigest()
        label_set = set()
        for label in line[1:]:
            if label:
                label_set.add(label)  # Use a set to handle any duplicate labels
        if label_set:
            if add_labels_to_user(list(label_set), email_hash, force, assessment_doc):
                users_updated += 1
    print("Successfully added labels to {} users".format(users_updated))
    return True


def import_methodology_file(filename, force, assessment_doc):
    """Import a methodology and assigns it to an Assessment."""
    if not force and assessment_doc.methodology_text:
        print(
            "Cannot add methodology text because it already exists for assessment {}".format(
                assessment_doc._id
            )
        )
        print("  Use --force to overwrite the existing methodology text:")
        print("------\n{}\n------".format(assessment_doc.methodology_text))
        return False
    else:
        methodology_file = open(filename, "r")
        assessment_doc.methodology_text = (
            methodology_file.read()
        )  # TODO Any validation needed here?
        assessment_doc.save()
        print(
            "Successfully added methodology text to assessment {}".format(
                assessment_doc._id
            )
        )
        return True


class PCA_Importer(object):
    """Class to handle importing of PCA Campaigns."""

    def __init__(self):
        """Class init function."""
        self.elements = []
        self.end_callback_call_count = 0

    def element_callback(self, parsed_element):
        """Append elements with parsed element."""
        # print('X' * 80)
        # util.pp(parsed_element)
        self.elements.append(parsed_element)

    def end_callback(self):
        """Increment callback count."""
        self.end_callback_call_count += 1


def campaign_already_exists(campaign_id):
    """Return True if campaign already exists in MongoDB."""
    try:
        CampaignDoc.objects.raw({"_id": campaign_id}).first()
        return True
    except DoesNotExist:
        return False


def import_campaign(
    campaign,
    assessment_doc,
    campaigns_file,
    campaign_end_date,
    template_doc,
    force=False,
):
    """Import a campaign and saves it to the DB."""
    if not force and campaign_already_exists(campaign["_id"]):
        print("Cannot import, campaign already exists: {}".format(campaign["_id"]))
        print("Use --force to destroy the currently stored document")
        print("and replace it with the imported version.")
        return False
    doc = CampaignDoc.from_document(campaign)
    doc.start_time = doc.start_time.replace(tzinfo=tz.tzutc())
    doc.end_time = campaign_end_date
    doc.customer = assessment_doc.customer
    doc.assessment = assessment_doc._id
    doc.users = list()
    doc.template = template_doc._id
    doc.images = dict()
    doc.save()
    print("Imported campaign {} from {}".format(doc._id, campaigns_file))
    return doc._id


def import_cs_campaigns_file(
    force, campaigns_file, assessment_doc, campaign_end_date, template_doc
):
    """Import a CobaltStrike campaign."""
    importer = PCA_Importer()
    handler = CobaltStrikeCampaignsContentHandler(
        importer.element_callback, importer.end_callback
    )
    f = open(campaigns_file, "rb")
    sax.parse(f, handler)
    f.close()
    campaign_ids = list()
    for campaign in importer.elements:
        campaign_id = import_campaign(
            campaign,
            assessment_doc,
            campaigns_file,
            campaign_end_date,
            template_doc,
            force,
        )
        if not campaign_id:
            return False
        campaign_ids.append(campaign_id)
    return campaign_ids


def user_already_exists(user_id):
    """Return True if user id already exists."""
    try:
        UserDoc.objects.raw({"_id": user_id}).first()
        return True
    except DoesNotExist:
        return False


def import_user(user, customer_id, force=False):
    """Import a user and save to the DB."""
    if user_already_exists(user["email_hash"]):
        if not force:
            # print('  User already exists, skipping import: {}'.format(user['email_hash']))
            return False
        else:
            print("  Updating user: {}".format(user["email_hash"]))
    doc = UserDoc()
    doc._id = user["email_hash"]
    doc.customer = customer_id
    doc.customer_defined_labels = dict()
    doc.save()
    return True


def import_cs_tokens_file(force, tokens_file, assessment_doc):
    """Import CobaltStrike tokens."""
    importer = PCA_Importer()
    handler = CobaltStrikeTokensContentHandler(
        importer.element_callback, importer.end_callback
    )
    f = open(tokens_file, "rb")
    sax.parse(f, handler)
    f.close()
    token_dict = (
        dict()
    )  # this is how we will relate tokens to their user_id (email hash) and their campaign_id
    campaign_users = defaultdict(
        lambda: set()
    )  # this is how we will track which users belong to which campaign
    new_users_imported = 0
    for user in importer.elements:
        if import_user(user, assessment_doc.customer, force):
            new_users_imported += 1
        token_dict[user["token"]] = {
            "user": user["email_hash"],
            "campaign": user["campaign"],
        }
        campaign_users[user["campaign"]].add(
            user["email_hash"]
        )  # add user_id (email_hash) to list of users for this campaign_id
    for campaign_id, users in campaign_users.items():
        campaign_doc = CampaignDoc.objects.raw({"_id": campaign_id}).first()
        campaign_doc.users = list(users)
        campaign_doc.save()
    print(
        "Parsed {} tokens and imported {} new unique users from {}".format(
            len(token_dict), new_users_imported, tokens_file
        )
    )
    return token_dict


def import_email(email, user_id, force=False):
    """Import an email and save to the DB."""
    existing_email = EmailDoc.find_by_user_campaign_time(
        user_id, email["campaign"], email["time"]
    )
    if existing_email:
        if force:
            email[
                "_id"
            ] = (
                existing_email._id
            )  # Re-use existing _id so existing doc gets overwritten
        else:
            print(
                "Cannot import, email already exists: {} {} {}".format(
                    user_id, email["campaign"], email["time"]
                )
            )
            print("Use --force to destroy the currently stored document")
            print("and replace it with the imported version.")
            return False
    doc = EmailDoc.from_document(email)
    doc.user = user_id
    doc.time = doc.time.replace(tzinfo=tz.tzutc())
    doc.save()
    return True


def import_cs_sent_emails_file(force, sent_emails_file, assessment_doc, token_dict):
    """Import CobaltStrike sent emails."""
    importer = PCA_Importer()
    handler = CobaltStrikeSentEmailsContentHandler(
        importer.element_callback, importer.end_callback
    )
    f = open(sent_emails_file, "rb")
    sax.parse(f, handler)
    f.close()
    for email in importer.elements:
        email["customer"] = assessment_doc.customer
        email["assessment"] = assessment_doc._id
        user_id = token_dict[email["token"]]["user"]
        import_email(email, user_id, force)
    print("Imported {} emails from {}".format(len(importer.elements), sent_emails_file))


def import_click(click, user_id, campaign_id, force=False):
    """Import a click event and save to the DB."""
    existing_click = ClickDoc.find_by_user_time_ip(
        user_id, click["time"], click["source_ip"]
    )
    if existing_click:
        if force:
            click[
                "_id"
            ] = (
                existing_click._id
            )  # Re-use existing _id so existing doc gets overwritten
        else:
            print(
                "Cannot import, click already exists: {} {} {}".format(
                    user_id, click["time"], click["source_ip"]
                )
            )
            print("Use --force to destroy the currently stored document")
            print("and replace it with the imported version.")
            return False
    doc = ClickDoc.from_document(click)
    doc.user = user_id
    doc.campaign = campaign_id
    doc.time = doc.time.replace(tzinfo=tz.tzutc())
    doc.save()
    return True


def import_cs_web_hits_file(
    force, web_hits_file, assessment_doc, token_dict, campaign_ids
):
    """Import a CobalStrike web hit event and save to the DB."""
    importer = PCA_Importer()
    handler = CobaltStrikeWebHitsContentHandler(
        importer.element_callback, importer.end_callback
    )
    f = open(web_hits_file, "rb")
    sax.parse(f, handler)
    f.close()
    for click in importer.elements:
        click["customer"] = assessment_doc.customer
        click["assessment"] = assessment_doc._id
        if token_dict.get(click["token"]):  # token is NOT guaranteed to be present
            user_id = token_dict[click["token"]]["user"]
            campaign_id = token_dict[click["token"]]["campaign"]
        else:
            user_id = campaign_id = None
            if (
                len(campaign_ids) == 1
            ):  # if there's only 1 campaign_id, then we know which campaign to use
                campaign_id = campaign_ids[0]
        import_click(click, user_id, campaign_id, force)
    print("Imported {} clicks from {}".format(len(importer.elements), web_hits_file))


def import_application(application, user_id, campaign_id, force=False):
    """Import an application and save to the DB."""
    existing_application = ApplicationDoc.find_by_user_time_name_version(
        user_id, application["time"], application["name"], application["version"]
    )
    if existing_application:
        if force:
            application[
                "_id"
            ] = (
                existing_application._id
            )  # Re-use existing _id so existing doc gets overwritten
        else:
            print(
                "Cannot import, application already exists: {} {} {} {}".format(
                    user_id,
                    application["time"],
                    application["name"],
                    application["version"],
                )
            )
            print("Use --force to destroy the currently stored document")
            print("and replace it with the imported version.")
            return False
    doc = ApplicationDoc.from_document(application)
    doc.user = user_id
    doc.campaign = campaign_id
    doc.time = doc.time.replace(tzinfo=tz.tzutc())
    doc.save()
    return True


def import_cs_applications_file(
    force, applications_file, assessment_doc, token_dict, campaign_ids
):
    """Import CobaltStrike application."""
    importer = PCA_Importer()
    handler = CobaltStrikeApplicationsContentHandler(
        importer.element_callback, importer.end_callback
    )
    f = open(applications_file, "rb")
    sax.parse(f, handler)
    f.close()
    for application in importer.elements:
        application["customer"] = assessment_doc.customer
        application["assessment"] = assessment_doc._id
        if token_dict.get(
            application["token"]
        ):  # valid token is NOT guaranteed to be present
            user_id = token_dict[application["token"]]["user"]
            campaign_id = token_dict[application["token"]]["campaign"]
        else:
            user_id = campaign_id = None
            if (
                len(campaign_ids) == 1
            ):  # if there's only 1 campaign_id, then we know which campaign to use
                campaign_id = campaign_ids[0]
        import_application(application, user_id, campaign_id, force)
    print(
        "Imported {} applications from {}".format(
            len(importer.elements), applications_file
        )
    )


def import_cs_xml_files(
    force, cs_xml_dir, assessment_doc, campaign_end_date, template_doc
):
    """Import a CobaltStrike XML file and redirect towards appropriate handler."""
    # import Cobalt Strike XML files
    campaign_ids = import_cs_campaigns_file(
        force,
        os.path.join(cs_xml_dir, CS_XML_CAMPAIGNS_FILE),
        assessment_doc,
        campaign_end_date,
        template_doc,
    )
    if not campaign_ids:
        return False
    else:
        token_dict = import_cs_tokens_file(
            force, os.path.join(cs_xml_dir, CS_XML_TOKENS_FILE), AssessmentDoc
        )
        import_cs_sent_emails_file(
            force,
            os.path.join(cs_xml_dir, CS_XML_SENT_EMAILS_FILE),
            assessment_doc,
            token_dict,
        )
        import_cs_web_hits_file(
            force,
            os.path.join(cs_xml_dir, CS_XML_WEB_HITS_FILE),
            assessment_doc,
            token_dict,
            campaign_ids,
        )
        import_cs_applications_file(
            force,
            os.path.join(cs_xml_dir, CS_XML_APPLICATIONS_FILE),
            assessment_doc,
            token_dict,
            campaign_ids,
        )
        print("")
        return True


def import_image(
    image_filename,
    landing_page,
    sent_email,
    link_warning,
    image_url,
    campaign_id_list,
    force=False,
):
    """Import image."""
    if landing_page:
        image_class = "landing-page"
    elif sent_email:
        image_class = "sent-email"
    elif link_warning:
        image_class = "link-warning"

    image_doc = None
    for campaign_id in campaign_id_list:
        try:
            campaign_doc = CampaignDoc.objects.raw({"_id": campaign_id}).first()
        except DoesNotExist:
            print(
                "Cannot assign {} image, campaign does not exist: {}\n".format(
                    image_class, campaign_id
                )
            )
            continue

        if campaign_doc.images.get(image_class) and not force:
            campaign_image = ImageDoc.objects.raw(
                {"_id": campaign_doc.images[image_class]}
            ).first()
            print(
                "Cannot assign {} image to campaign {}".format(image_class, campaign_id)
            )
            print("{} image previously assigned:".format(image_class))
            print("       _id: {}".format(campaign_image._id))
            print("  filename: {}".format(campaign_image.filename))
            print("       URL: {}".format(campaign_image.url))
            print("  imported: {}".format(campaign_image.data.uploadDate))
            print(
                "Use --force to replace the previous {} image with this one.\n".format(
                    image_class
                )
            )
            continue
        else:
            if not image_doc:
                image_doc = ImageDoc()
                image_doc.data = open(image_filename, "rb")
                image_doc.filename = os.path.basename(image_filename)
                if image_url:
                    image_doc.url = image_url
                else:
                    image_doc.url = ""
                image_doc.img_class = image_class
                image_doc.save()  # _id is assigned after save() completes
                print(
                    "Successfully imported {} image from file: {} (image _id: {})\n".format(
                        image_class, image_filename, ImageDoc._id
                    )
                )

            campaign_doc.images[image_class] = image_doc._id
            campaign_doc.save()
            print(
                "Successfully assigned {} image to campaign: {}\n".format(
                    image_class, campaign_doc._id
                )
            )
    return ImageDoc


def import_template_file(template_filename, template_id=None, force=False):
    """Import template file."""
    template_file = open(template_filename, "r")
    template = yaml.safe_load(template_file)
    template_file.close()

    template_doc = TemplateDoc.from_document(template)
    template_doc.complexity = 0
    try:
        template_doc.full_clean()
    except ValidationError as e:
        print('Validation errors in template file "{}":'.format(template_filename))
        for msg in e.message.values():
            print("  {}".format(msg[0]))
        print("\nExiting without importing template.")
        return False

    if template_id is not None:
        try:
            # Check if template with template_id already exists in the database
            existing_template = TemplateDoc.objects.raw(
                {"_id": ObjectId(template_id)}
            ).first()
        except DoesNotExist:
            existing_template = None

        if existing_template:
            if not force:
                print("Cannot import, template already exists: {}".format(template_id))
                print("Use --force to destroy the currently stored template")
                print("and replace it with the imported version.")
                return False
            else:
                print("Found existing template {}:".format(template_id))
                print('  Original name: "{}"'.format(existing_template.name))
                print("  Original complexity: {}".format(existing_template.complexity))
                print("Replacing with template below...\n")
                template_doc._id = template_id
                end_confirmation_text = "the updated"
        else:
            # Template with template_id does not exist in database
            print(
                "Cannot update template {} because it does not exist.".format(
                    template_id
                )
            )
            return False
    else:
        # No template_id was provided, so create a new template
        end_confirmation_text = "a new"

    print('Template "{}" Summary:'.format(template_doc.name))
    for template_attribute in Indicator.INDICATOR_LOOKUP.keys():
        print("  {}:".format(template_attribute))
        for key in template[template_attribute].keys():
            print(
                "    {}: {} [{}]".format(
                    key,
                    template[template_attribute][key],
                    Indicator.INDICATOR_LOOKUP[template_attribute][key][
                        template[template_attribute][key]
                    ],
                )
            )
            # only count the following attributes towards the overall complexity
            if template_attribute in ("appearance", "sender", "relevancy"):
                template_doc.complexity += template[template_attribute][key]
    print(
        '  complexity: {} (calculated from attributes above, excluding "behavior")'.format(
            template_doc.complexity
        )
    )

    if template_doc.complexity < 1 or template_doc.complexity > 6:
        print(
            "    WARNING: Complexity should be between 1 and 6. This template has a complexity of {}.".format(
                template_doc.complexity
            )
        )

    print()
    if not util.warn_and_confirm(
        f"This will import {end_confirmation_text} template into the database. Review the summary above for accuracy."
    ):
        print("Exiting without importing template.")
        return False

    template_doc.save()
    print(
        'Successfully imported "{}" template with ID {}'.format(
            template_doc.name, template_doc._id
        )
    )
    return True


def main():
    """Drive application."""
    if args["--sample-customer"]:
        output_customer_template()
    elif args["--sample-assessment"]:
        output_assessment_template()
    elif args["--sample-template"]:
        output_phishing_email_template()

    # import IPython; IPython.embed() #<<< BREAKPOINT >>>
    # sys.exit(0)

    # TODO Investigate MongoModel.save(force_insert) - may work better than current '--force' setup
    if args["--customer"] or args["--assessment"]:
        if args["FILE"] is not None:
            success = import_json_file(
                args["FILE"], args["--force"], args["--customer"], args["--assessment"]
            )
        else:
            success = import_json_stdin(
                args["--force"], args["--customer"], args["--assessment"]
            )
    elif args["--image"]:
        success = import_image(
            args["IMAGE_FILE"],
            args["landing-page"],
            args["sent-email"],
            args["link-warning"],
            args["IMAGE_URL"],
            args["<CAMPAIGN_ID>"],
            args["--force"],
        )
    elif args["--template"]:
        success = import_template_file(
            args["FILE"], args["TEMPLATE_ID"], args["--force"]
        )
    else:
        try:
            assessment_doc = AssessmentDoc.objects.raw(
                {"_id": args["ASSESSMENT_ID"]}
            ).first()
        except DoesNotExist:
            assessment_doc = None
            print(
                "Cannot import, assessment does not exist: {}".format(
                    args["ASSESSMENT_ID"]
                )
            )
            success = False

        if assessment_doc:
            if args["--user-labels"]:
                success = import_user_labels_file(
                    args["FILE"], args["--force"], assessment_doc
                )
            elif args["--methodology"]:
                success = import_methodology_file(
                    args["FILE"], args["--force"], assessment_doc
                )
            else:
                try:
                    campaign_end_date = parser.parse(args["CAMPAIGN_END_DATE"]).replace(
                        tzinfo=tz.tzutc()
                    )
                except ValueError:
                    print(
                        "Cannot import, error parsing campaign end date: {}".format(
                            args["CAMPAIGN_END_DATE"]
                        )
                    )
                    print('Campaign end date must be in format: "YYYY-MM-DD HH:MM"')
                    sys.exit(-1)

                try:
                    template_doc = TemplateDoc.objects.raw(
                        {"_id": ObjectId(args["TEMPLATE_ID"])}
                    ).first()
                except InvalidId:
                    print(
                        "Cannot import, template id is invalid: {}".format(
                            args["TEMPLATE_ID"]
                        )
                    )
                    sys.exit(-1)
                except DoesNotExist:
                    print(
                        "Cannot import, template does not exist: {}".format(
                            args["TEMPLATE_ID"]
                        )
                    )
                    sys.exit(-1)

                success = import_cs_xml_files(
                    args["--force"],
                    args["CS_XML_DIRECTORY"],
                    AssessmentDoc,
                    campaign_end_date,
                    template_doc,
                )

    if not success:
        sys.exit(-1)


if __name__ == "__main__":
    main()
